# OauthAuthorize

/config = {} script "OauthConfig"
/now = int date "X"

/response_type ~ "token"
/client_id ~ "1"
/scope ~ "*"
/state ~ ""

/client = query {
  item: OauthClient(id: /client_id) {
    id
    name
    trusted
    redirectUri
  }
} pick /item

/scope = normalizeScope /scope

(/redirect_uri and !(/redirect_uri startsWith /client/redirectUri)) then error {type: "BadRequest"}

/ = (!/redirect_uri) then {{
  /redirect_uri = /client/redirectUri
}}

/ = /cookies/session then {{
  /sessions = query {
    sessions: listUserSession (filters: {token: /cookies/session}, limit: 1) {
      items {
        user { id name }
      }
    }
  } pick /sessions/items
  / = /sessions/0 then {{
    /user = {
      id: /sessions/0/user/id,
      name: /sessions/0/user/name
    }
  }}
}}

# If we have posted the login form.
/ = /username then {{
  /users = query {
    users: listUser(filters: {
      name: /username,
      blocked: false
    }) {
      items {
        id name password
      }
    }
  } pick /users/items
  /validPassword = /users/0/password validatePassword /password
  / = /validPassword then {{
    /user = {
      id: /users/0/id,
      name: /users/0/name
    }
    /session = {
      user: /user/id,
      created: /now,
      token: secureToken 256,
      expires: /now + {{
        /expires = /config/accessTokenExpire
        / = /remember then {{
          /expires = /config/rememberExpire
        }}
        / = /expires
      }}
    }

    /session = mutation {
      session: createUserSession(input: /session) { id token }
    } pick /session

    /data/cookies/session = {
      value: /session/token,
      path: "/oauth"
    }
    / = /remember then {{
      /data/cookies/session/maxAge = /config/rememberExpire
    }}
  }}
  / = (!/validPassword) then {{
    /wrongCredentials = true
  }}
}}

# If there is a valid user (either from session or after validating login).
/ = /user then {{
  / = /client/trusted then {{
    /allow = "true"
  }}
  / = (!/client/trusted) then {{
    # Check if authorization was already given by checking the existence of an access token.
    /tokens = query {
      tokens: listOauthAccessToken(filters: {
        client: /client/id,
        user: /user/id,
        scope: /scope,
        expires_gt: /now + 900
      }) {
        items { id }
      }
    } pick /tokens/items
    / = /tokens/0/id then {{
      /allow = "true"
    }}
  }}

  / = (/allow == "true") then {{
    / = (/response_type == "code") then {{
      /payload = {
        aud: /client/id,
        sub: /user/id,
        scope: /scope,
        exp: (int date "X") + 60
      }
      /code = [
        json {
          alg: "HS256",
          typ: "JWT"
        },
        json /payload
      ]
      /code = (/code map base64url /item) join "."
      /code = /code + "." + base64urlFromBase64 signature /code

      /redirect_uri = /redirect_uri + "?code=" + /code + "&state=" + (urlencoded /state)
    }}
    / = (/response_type == "token") then {{
      /token = / script "OauthCreateToken"
      /redirect_uri = /redirect_uri + "#token=" + (urlencoded /token/token) + "&state=" + (urlencoded /state)
    }}
    /data/status = 302
    /data/body = "Redirecting..."
    /data/redirect = /redirect_uri
  }}

  / = (/allow != "true") then {{
    /data/body = {
      client: /client/name,
      client_id: /client_id,
      response_type: /response_type,
      redirect_uri: /redirect_uri,
      scope: /scope,
      state: /state,
      message: null
    } script "OauthRenderAuthorize"
  }}
}}

/ = (!/user) then {{
  /message = ""
  / = /wrongCredentials then {{
    /message = "Wrong username or password"
  }}
  /data/body = {
    client: /client/name,
    client_id: /client_id,
    response_type: /response_type,
    redirect_uri: /redirect_uri,
    scope: /scope,
    state: /state,
    message: /message
  } script "OauthRenderLogin"
}}

# Set security related headers.
/"data/headers/X-Frame-Options" = "DENY"
/"data/headers/Cache-Control" = "no-store"
/"data/headers/Pragma" = "no-cache"

/ = /data
